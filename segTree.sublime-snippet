<snippet>
	<content><![CDATA[
template<typename Node, typename Update>
struct SegTree {
    vector<Node> tree;
    vector<ll> arr; // type may change
    int n;
    int s;
    SegTree(int a_len, vector<ll> &a) { // change if type updated
        arr = a;
        n = a_len;
        s = 1;
        while(s < 2 * n){
            s = s << 1;
        }
        tree.resize(s); fill(tree.begin(), tree.end(), Node());
        build(0, n - 1, 1);
    }
    void build(int start, int end, int node)  // Never change this
    {
        if (start == end)    {
            tree[node] = Node(arr[start]);
            return;
        }
        int mid = (start + end) / 2;
        build(start, mid, node<<1);
        build(mid + 1, end, node<<1|1);
        tree[node].merge(tree[node<<1], tree[node<<1|1]);
    }
    void update(int start, int end, int node, int query_index, Update &u)  // Never Change this
    {
        if (start == end) {
            u.apply(tree[node]);
            return;
        }
        int mid = (start + end) / 2;
        if (mid >= query_index)
            update(start, mid, node<<1, query_index, u);
        else
            update(mid + 1, end, node<<1|1, query_index, u);
        tree[node].merge(tree[node<<1], tree[node<<1|1]);
    }
    Node query(int start, int end, int node, int left, int right) { // Never change this
        if (start > right || end < left)
            return Node();
        if (start >= left && end <= right)
            return tree[node];
        int mid = (start + end) / 2;
        Node l, r, ans;
        l = query(start, mid, node<<1, left, right);
        r = query(mid + 1, end, node<<1|1, left, right);
        ans.merge(l, r);
        return ans;
    }
    void make_update(int index, ll val) {  // pass in as many parameters as required
        Update new_update = Update(val); // may change
        update(0, n - 1, 1, index, new_update);
    }
    Node make_query(int left, int right) {
        return query(0, n - 1, 1, left, right);
    }
};

struct Node1 {
    ll val; // may change
    Node1() { // Identity element
        val = 0;    // may change
    }
    Node1(ll p1) {  // Actual Node
        val = p1; // may change
    }
    void merge(Node1 &l, Node1 &r) { // Merge two child nodes
        val = l.val + r.val;  // may change
    }
};

struct Update1 {
    ll val; // may change
    Update1(ll p1) { // Actual Update
        val = p1; // may change
    }
    void apply(Node1 &a) { // apply update to given node
        a.val = val; // may change
    }
};


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
